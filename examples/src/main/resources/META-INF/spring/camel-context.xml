<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <!-- configuration for the MySQL database -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/stocks"/>
        <property name="username" value="marcelo"/>
        <property name="password" value="marcelobro!"/>
    </bean>

    <!-- configure the Camel SQL component to use the JDBC data source -->
    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- This creates an embedded ActiveMQ Broker -->
    <broker xmlns="http://activemq.apache.org/schema/core" useJmx="true" persistent="false">
        <transportConnectors>
            <transportConnector uri="mv://localhost:61616"/>
        </transportConnectors>
    </broker>

    <!-- Lets connect the Camel ActiveMQ component to the embedded broker.
         See http://camel.apache.org/activemq.html for more information.
    -->
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="brokerURL" value="failover:mv://localhost:61616"/>
    </bean>

    <!-- Here is a sample which processes the input files
           (leaving them in place - see the 'noop' flag), and
           sends them on a JMS queue. This queue is watched by
           another route which then performs content based
           routing on the messages using XPath.
    -->
    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <!-- use Camel property placeholder loaded from the given file -->
        <propertyPlaceholder id="placeholder" location="classpath:ftp.properties"/>
        <!--<route id="download-ftp">
            <from uri="{{ftp.server}}"/>
            <to uri="file:target/download"/>
        </route>
        -->
        <route id="send-to-queue">
            <from uri="file:target/download"/>
            <unmarshal><csv/></unmarshal>
            <split>
                <simple>body</simple>
                <to uri="activemq:stocks.closing"/>
            </split>
            <log message="send to queue"/>
        </route>

        <route id="persits-to-db">
            <from uri="activemq:stocks.closing"/>
            <to uri="activemq:stocks.closing"/>
        </route>

        <!--<route>-->
        <!--<from uri="{{ftp.server}}"/>-->
        <!--<to uri="activemq:stocks.closing"/>-->
        <!--</route>-->
        <!--<route>-->
        <!--<from uri="activemq:stocks.closing"/>-->
        <!--<to uri="sql:{{sql.insertTicker}}"/>-->
        <!--<log message="Inserted new order"/>-->
        <!--</route>-->
    </camelContext>

</beans>
